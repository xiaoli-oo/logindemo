"""
Django settings for logindemo project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import sys
import redis
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.insert(0, os.path.join(BASE_DIR, 'libs'))
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
os.environ.setdefault('FORKED_BY_MULTIPROCESSING', '1')

DATA_PATHS = os.path.join(BASE_DIR, 'data')

from logindemo import config

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-87s^_$q&e9muw4^*fgiwp2lh24)l$h-@tjn+u_*lqt8ffluzh$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config.DEBUG

ALLOWED_HOSTS = ['*']
APPEND_SLASH = True  # 默认为APPEND_SLASH=True，其作用就是自动在网址结尾加'/'
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"
SESSION_COOKIE_AGE = config.COOKIE_AGE

WEBSOCKET_FACTORY_CLASS = 'dwebsocket.backends.uwsgi.factory.uWsgiWebSocketFactory'

CACHES = {
    'default': {  # 默认
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://%s:%s/0" % (config.REDIS_HOST, config.REDIS_PORT),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": config.REDIS_PASSWORD,
        }
    },
    'token': {  # 后台缓存
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://%s:%s/1" % (config.REDIS_HOST, config.REDIS_PORT),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": config.REDIS_PASSWORD,
        }
    },
    'api': {  # 后台缓存
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://%s:%s/2" % (config.REDIS_HOST, config.REDIS_PORT),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": config.REDIS_PASSWORD,
        }
    },
    'user': {  # 后台缓存
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://%s:%s/3" % (config.REDIS_HOST, config.REDIS_PORT),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": config.REDIS_PASSWORD,
        }
    },
    'pgsql': {  # mysql缓存
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'sys_cache_table',
    },
}

REDIS_POOL = redis.ConnectionPool(
    host=config.REDIS_HOST, port=config.REDIS_PORT,
    password=config.REDIS_PASSWORD, db=14, decode_responses=True)

# Application definition

INSTALLED_APPS = [
    "simpleui",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'dwebsocket',
    'django.conf',
    'rest_framework',
    'rest_framework_swagger',

    # 工具
    'django_filters',
    'django_ckeditor_5',
    'simple_history',
    'django_crontab',
    'django_q',
    'django_dbconn_retry',
    'libs',
    'import_export',

    # 应用app
    "user",
    "system",


]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'logindemo.middleware.JwtAuthorizationMiddleware',
    'logindemo.middleware.DataDecryption',
    'libs.crum.CurrentRequestUserMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
]

ROOT_URLCONF = 'logindemo.urls'

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
}

STATICFILES_FINDERS = (
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder"
)

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'logindemo.context_processors.siteinfo',
            ],
        },
    },
]

WSGI_APPLICATION = 'logindemo.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'CONN_MAX_AGE': 300,
        'USER': config.MYSQL_USER, 'PASSWORD': config.MYSQL_PASS,
        'HOST': config.MYSQL_HOST, 'PORT': config.MYSQL_PORT,
        'NAME': config.MYSQL_DB,
        'OPTIONS': {
            'autocommit': True,
            "init_command": "SET foreign_key_checks = 0;",
            'charset': 'utf8mb4'
        }
    },
    'db_write': {
        'ENGINE': 'django.db.backends.mysql',
        'CONN_MAX_AGE': 300,
        'USER': config.MYSQL_USER, 'PASSWORD': config.MYSQL_PASS,
        'HOST': config.MYSQL_HOST, 'PORT': config.MYSQL_PORT,
        'NAME': config.MYSQL_DB,
        'OPTIONS': {
            'autocommit': True,
            "init_command": "SET foreign_key_checks = 0;",
            'charset': 'utf8mb4'
        }
    },
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'templates')]

MEDIA_URL = '/media/'  # 指定 MEDIA_URL 的位置
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_DIRS = (os.path.join(BASE_DIR, 'media'))

STATIC_URL = '/static/'  # 指定 STATIC_URL 的位置
if not DEBUG:
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')
if DEBUG:
    STATICFILES_DIRS.append(os.path.join(BASE_DIR, 'static'))

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field


# --------django CKEditor 5配置-----
customColorPalette = [
    {
        'color': 'hsl(4, 90%, 58%)',
        'label': 'Red'
    },
    {
        'color': 'hsl(340, 82%, 52%)',
        'label': 'Pink'
    },
    {
        'color': 'hsl(291, 64%, 42%)',
        'label': 'Purple'
    },
    {
        'color': 'hsl(262, 52%, 47%)',
        'label': 'Deep Purple'
    },
    {
        'color': 'hsl(231, 48%, 48%)',
        'label': 'Indigo'
    },
    {
        'color': 'hsl(207, 90%, 54%)',
        'label': 'Blue'
    },
]
CKEDITOR_5_CONFIGS = {
    'default': {
        'toolbar': ['heading', '|', 'bold', 'italic', 'link',
                    'bulletedList', 'numberedList', 'blockQuote', 'imageUpload', ],

    },
    'extends': {
        'blockToolbar': [
            'paragraph', 'heading1', 'heading2', 'heading3',
            '|',
            'bulletedList', 'numberedList',
            '|',
            'blockQuote',
        ],
        'toolbar': ['heading', '|', 'outdent', 'indent', '|', 'bold', 'italic', 'link', 'underline', 'strikethrough',
                    'code', 'subscript', 'superscript', 'highlight', '|', 'codeBlock', 'sourceEditing', 'insertImage',
                    'bulletedList', 'numberedList', 'todoList', '|', 'blockQuote', 'imageUpload', '|',
                    'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', 'mediaEmbed', 'removeFormat',
                    'insertTable', ],
        'image': {
            'toolbar': ['imageTextAlternative', '|', 'imageStyle:alignLeft',
                        'imageStyle:alignRight', 'imageStyle:alignCenter', 'imageStyle:side', '|'],
            'styles': [
                'full',
                'side',
                'alignLeft',
                'alignRight',
                'alignCenter',
            ]

        },
        'table': {
            'contentToolbar': ['tableColumn', 'tableRow', 'mergeTableCells',
                               'tableProperties', 'tableCellProperties'],
            'tableProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            },
            'tableCellProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            }
        },
        'heading': {
            'options': [
                {'model': 'paragraph', 'title': 'Paragraph', 'class': 'ck-heading_paragraph'},
                {'model': 'heading1', 'view': 'h1', 'title': 'Heading 1', 'class': 'ck-heading_heading1'},
                {'model': 'heading2', 'view': 'h2', 'title': 'Heading 2', 'class': 'ck-heading_heading2'},
                {'model': 'heading3', 'view': 'h3', 'title': 'Heading 3', 'class': 'ck-heading_heading3'}
            ]
        }
    },
    'list': {
        'properties': {
            'styles': 'true',
            'startIndex': 'true',
            'reversed': 'true',
        }
    }
}

# django-import-export配置
IMPORT_EXPORT_USE_TRANSACTIONS = True  # 默认值为False。它确定库是否会在数据导入中使用数据库事务，以确保安全。
IMPORT_EXPORT_CHUNK_SIZE = 1024  # 迭代 QuerySet 以导出数据时定义块大小的整数。默认为100

# -------- SIMPLEUI配置----------
SIMPLEUI_STATIC_OFFLINE = True  # 离线模式
# 修改左侧菜单首页设置tinymce
SIMPLEUI_HOME_PAGE = ''  # 指向页面
SIMPLEUI_HOME_TITLE = f'{config.WEB_NAME}，欢迎你!'  # 首页标题
SIMPLEUI_HOME_ICON = 'fa fa-code'  # 首页图标
SIMPLEUI_LOGO = STATIC_URL + "img/logo.png"  # 本地logo
SIMPLEPRO_FK_ASYNC_DATA = True  # 是否异步加载外键
SIMPLEUI_HOME_INFO = True  # 是否显示右侧广告链接
SIMPLEUI_ANALYSIS = True  # 使用分析
SIMPLEUI_HOME_QUICK = True  # 快捷操作
SIMPLEUI_HOME_ACTION = True  # 最近操作
SIMPLEUI_DEFAULT_THEME = 'e-blue.css'  # 设置默认主题，指向主题css文件名。Admin Lte风格
# 设置右上角Home图标跳转链接，会以另外一个窗口打开
SIMPLEUI_INDEX = f'http://{config.WEB_URL}/admin/'

# --------django-Q配置------
Q_CLUSTER = {
    'name': 'mycluster',
    'workers': 8,  # worker数。默认为当前主机的CPU计数，
    'recycle': 500,  # worker在回收之前要处理的任务数。有助于定期释放内存资源。默认为500。
    'timeout': 3600 * 3,  # 任务的超时时间（以秒为单位）。如果任务在指定的时间内未完成，它将被认为失败。
    'max_attempts': 1,
    # Limit the number of retry attempts for failed tasks. Set to 0 for infinite retries. Defaults to 0
    'retry': 3600 * 3 + 1000,  # 任务失败后的重试间隔（以秒为单位）。在任务失败后，Django-Q 将等待一段时间，然后尝试重新执行任务。
    'compress': True,  # 数据压缩
    'save_limit': 250,  # 限制保存到Django的成功任务的数量。0为无限，-1则不会保存
    'queue_limit': 64,  # 排队的任务数量，默认为workers**2。
    'cpu_affinity': 4,  # 设置每个工作人员可以使用的处理器数量。根据经验; cpu_affinity 1支持重复的短期运行任务，而没有亲和力则有利于长时间运行的任务。
    'label': '消息队列Q',  # 用于Django Admin页面的标签。默认为'Django Q'
    'ack_failures': True,
    'redis': {
        'host': config.REDIS_HOST,
        'port': config.REDIS_PORT,
        'db': 12,
        'password': config.REDIS_PASSWORD,

    }
}

# ------配置定时任务-------
CRONJOBS = [
    # ('* * * * *', 'games.tasks.my_task', ('','',)),  # 每分钟执行任务
]

# DRF缓存扩展
REST_FRAMEWORK_EXTENSIONS = {
    # 缓存时间
    'DEFAULT_CACHE_RESPONSE_TIMEOUT': 60 * 15,
    # 缓存存储
    'DEFAULT_USE_CACHE': 'default',
}

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = ("*", 'DELETE', 'GET', 'OPTIONS', 'PATCH', 'POST', 'PUT', 'VIEW')
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_HEADERS = ("*")

SESSION_COOKIE_SAMESITE = 'Lax'

DJANGO_LOG_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(DJANGO_LOG_DIR):
    os.mkdir(DJANGO_LOG_DIR)
# 日志
if not DEBUG:
    import logging.handlers

    server_log = logging.getLogger()
    server_log.setLevel(logging.INFO)
    handler = logging.handlers.RotatingFileHandler(os.path.join(DJANGO_LOG_DIR, 'django.log'), maxBytes=1024 * 1024,
                                                   backupCount=7)
    handler.setFormatter(
        logging.Formatter('%(asctime)s %(levelname)s %(module)s.%(funcName)s Line:%(lineno)d %(message)s'))
    server_log.addHandler(handler)
